(:-module(bin_memo,[])).
:- dynamic
        rule/2.
:- dynamic
        gensym__r/1.
:- dynamic
        filtered/1.
:- dynamic
        program_point_for/1.
logen(solve, solve([])).
logen(solve, solve([unfold(_,A)|B])) :-
        logen(memo, solve_atom(A)),
        logen(unfold, solve(B)).
logen(solve, solve([call(_,_)|A])) :-
        logen(unfold, solve(A)).
logen(solve, solve([memo(_,A)|B])) :-
        logen(memo, solve_atom(A)),
        logen(unfold, solve(B)).
logen(solve, solve([rescall(_,_)|A])) :-
        logen(unfold, solve(A)).
logen(solve_atom, solve_atom(A)) :-
        logen(call, rule(A,B)),
        logen(unfold, solve(B)).
logen(generalise, generalise(A,static,A,A)).
logen(generalise, generalise(_,dynamic,_,dyn)).
logen(generalise, generalise(A,B,C,D)) :-
        logen(call, B=..[E,F|G]),
        logen(call, A=..[E|H]),
        logen(unfold, l_gen(H,[F|G],I,J)),
        logen(call, C=..[E|I]),
        logen(call, D=..[E|J]).
logen(l_gen, l_gen([],[],[],[])).
logen(l_gen, l_gen([A|B],[C|D],[E|F],[G|H])) :-
        logen(unfold, generalise(A,C,E,G)),
        logen(unfold, l_gen(B,D,F,H)).
logen(bin_solve, bin_solve(A/B,[memo(_,C)|_],D)) :-
        logen(call, functor(C,A,B)),
        logen(call, filter(C,E)),
        logen(unfold, generalise(C,E,_,D)).
logen(bin_solve, bin_solve(A,[memo(_,B)|_],C)) :-
        logen(call, filter(B,D)),
        logen(unfold, generalise(B,D,E,_)),
        logen(memo, memo_solve_atom(A,E,C)).
logen(bin_solve, bin_solve(A,[unfold(_,B)|_],C)) :-
        logen(memo, bin_solve_atom1(A,B,C)).
logen(bin_solve, bin_solve(A,[unfold(_,B)|C],D)) :-
        logen(memo, solve_atom(B)),
        logen(unfold, bin_solve(A,C,D)).
logen(bin_solve, bin_solve(A,[memo(_,_)|B],C)) :-
        logen(unfold, bin_solve(A,B,C)).
logen(bin_solve, bin_solve(A,[call(_,B)|C],D)) :-
        logen(rescall, call(B)),
        logen(unfold, bin_solve(A,C,D)).
logen(bin_solve, bin_solve(A,[rescall(_,_)|B],C)) :-
        logen(unfold, bin_solve(A,B,C)).
logen(bin_solve_atom1, bin_solve_atom1(A,B,C)) :-
        logen(call, rule(B,D)),
        logen(unfold, bin_solve(A,D,C)).
logen(memo_solve_atom, memo_solve_atom(A,B,C)) :-
        logen(call, filter(D,E)),
        logen(unfold, generalise(D,E,F,B)),
        logen(memo, bin_solve_atom1(A,F,C)).
logen(solve_file, solve_file(A)) :-
        logen(call, use_module(library(system))),
        resif(logen(call,file_exists(A)), (logen(unfold,load_rules(A)),logen(call,!),logen(call,filtered(B)),logen(memo,solve_atom(B)),logen(call,functor(B,C,D)),logen(call,functor(E,C,D)),logen(rescall,pp(C/D)),logen(call,F=C/D),logen(memo,memo_solve_atom(F,B,E))), logen(rescall,file_not_found(A))).
logen(load_rules, load_rules(A)) :-
        logen(call, op(750,fx,filter)),
        logen(unfold, clear),
        logen(call, seeing(B)),
        logen(call, see(A)),
        logen(unfold, read_assert),
        logen(call, seen),
        logen(call, see(B)).
logen(clear, clear) :-
        logen(call, retractall(rule(_,_))),
        logen(call, retractall(filter(_,_))),
        logen(call, retractall(gensym__r(_))),
        logen(call, retractall(program_point_for(_,_))),
        logen(call, retractall(filtered(_))).
logen(read_assert, read_assert) :-
        logen(call, read_term(A,[])),
        if(logen(call,A=end_of_file), logen(call,true), (logen(unfold,assert_term(A)),logen(unfold,read_assert))).
logen(assert_term, assert_term((logen(_,A):-B))) :-
        logen(call, !),
        logen(unfold, convert_body2list(B,C)),
        logen(call, assert(rule(A,C))),
        logen(unfold, add_filtered(A)).
logen(assert_term, assert_term((:-filter A))) :-
        logen(call, !),
        logen(unfold, freshCall(A,B)),
        logen(call, assert(filter(B,A))).
logen(assert_term, assert_term((:-_))) :-
        logen(call, !).
logen(assert_term, assert_term(logen(_,A))) :-
        logen(call, assert(rule(A,[]))),
        logen(unfold, add_filtered(A)).
logen(add_filtered, add_filtered(A)) :-
        logen(unfold, freshCall(A,B)),
        logen(call, filtered(B)),
        logen(call, !).
logen(add_filtered, add_filtered(A)) :-
        logen(unfold, freshCall(A,B)),
        logen(call, assert(filtered(B))).
logen(convert_body2list, convert_body2list((A,B),[C|D])) :-
        logen(unfold, convert_call(A,C)),
        logen(unfold, convert_body2list(B,D)).
logen(convert_body2list, convert_body2list(A,[B])) :-
        logen(unfold, convert_call(A,B)).
logen(convert_call, convert_call(logen(A,B),C)) :-
        logen(call, C=..[A,D,B]),
        logen(unfold, gensym(D)),
        logen(unfold, freshCall(B,E)),
        logen(call, assert(program_point_for(E,D))).
logen(freshCall, freshCall(A,B)) :-
        logen(call, A=..[C|D]),
        logen(call, length(D,E)),
        logen(call, length(F,E)),
        logen(call, B=..[C|F]).
logen(gensym, gensym(A)) :-
        logen(call, gensym__r(A)),
        logen(call, !),
        logen(call, retract(gensym__r(A))),
        logen(call, B is A+1),
        logen(call, assert(gensym__r(B))).
logen(gensym, gensym(0)) :-
        logen(call, assert(gensym__r(1))).
:- filter
        memo_solve_atom(static_nf, nonvar, nonvar).
:- filter
        test(dynamic, dynamic).
:- filter
        test(static, dynamic, dynamic).
:- filter
        solve_atom(nonvar).
:- filter
        solve_file(static).
:- filter
        bin_solve_atom1(static_nf, nonvar, nonvar).
