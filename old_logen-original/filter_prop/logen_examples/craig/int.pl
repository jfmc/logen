lookup(_, false, []).lookup(V, true, [b(V, true) | _]).lookup(V, false, [b(V, false) | _]).lookup(RetName, RetVal, [b(Var, _) | Env]) :- 	RetName == Var -> fail; lookup(RetName, RetVal, Env).eval(true, _).eval(and(A, B), Env) :- eval(A, Env), eval(B, Env).eval(or(A, _), Env) :- eval(A, Env).eval(or(_, A), Env) :- eval(A, Env).eval(var(A), Env) :- lookup(A, R, Env), R.eval(not(A), Env) :- eval(A, Env) -> fail ; true.int(true, true, _).int(false, false, _).int(fail, fail, _).int(and(A,B), Result, Env) :- int(A, A1, Env), int(B, B1, Env), and(A1, B1, Result).int(or(A,B), Result, Env) :- int(A, A1, Env), int(B, B1, Env), or(A1, B1, Result).int(not(X), Result, Env) :- int(X, R1, Env), not(R1, Result).int(var(X), Result, Environment) :- lookup(X, Result, Environment).int(c(D), Result, Env) :- define(D, P, Env), int(P, Result, Env).% add in something that could possibly loop???define(xor(A,B), or(and(not(A), B), and(not(B), A)), _).define(p, c(p), Env) :- lookup(infflag, true, Env).define(p, var(a), Env) :- lookup(infflag, false, Env).not(true, false).not(false, true).and(true, true, true).and(_, false, false).and(false, true, false).or(A, B, Result) :- int(not(and(not(A), not(B))), Result, []).