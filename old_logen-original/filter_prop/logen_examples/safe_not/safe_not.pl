strue(\+(X)) :- snot(X).strue(Call) :- (negate(Call,NCall) ; negate(NCall,Call)), call(Call).strue(or(X,_)) :- strue(X).strue(or(_,Y)) :- print(Y),nl,strue(Y).strue(and(X,Y)) :- strue(X),strue(Y).strue(unfold(X)) :- sunfold(X).strue(when(X,Y)) :- when(X,strue(Y)).strue(call(X)) :- call(X).snot(\+(X)) :- strue(X).snot(Call) :- (negate(Call,NCall) ; negate(NCall,Call)), call(NCall).snot(and(X,_)) :- snot(X).snot(and(X,Y)) :- strue(X),snot(Y).snot(or(X,Y)) :- snot(X),snot(Y).snot(unfold(X)) :- nunfold(X).snot(when(X,Y)) :- when(X,snot(Y)).snot(call(X)) :- \+(call(X)).negate(=(X,Y),'\\='(X,Y)).negate(true,fail).sunfold(X) :- claus(X,Y),strue(Y).nunfold(X) :- claus(X,Y),snot(Y).claus(q(X),or(=(X,a),=(X,b))).claus(p(X),when(nonvar(X),or(call(X=[]),and(call(X=[_|T]),unfold(p(T)))))).claus(mem(X,L),or(    and(=(L,[H|_]),=(X,H)),    and(=(L,[H|T]),unfold(mem(X,T))))).        claus(mem2(X,L),or(    and(=(L,[H|_]),=(X,H)),    and(=(L,[H|T]),and(\=(X,H),unfold(mem2(X,T)))))).test(X) :- snot(unfold(p(X))), X=[_H|_T].not_mem(X,L) :- nunfold(mem(X,L)).mem(X,L) :- sunfold(mem(X,L)).s :- mem(1,[2,1]).t :- not_mem(1,[2,3]).t :- mem(1,[3,2,1,4]).q(X) :- sunfold(q(X)).nq(X) :- nunfold(q(X)).