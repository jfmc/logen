:- table nont/3.

nont(A,B,C) :- 
    iff(D),   /* D is always ground */
    t(D,B,E), 
    nont(A,E,C), 
    true.
nont(A,B,C) :- 
    t(A,B,C), 
    true.
    
:- table t/3.

t(A,B,C) :- 
    iff(B,A,C),   /* B is ground iff A and C are ground */
    true.
true.
fail_iff :- 
    fail.
iff(true).
iff(true,true).
iff(false,false).
iff(true,true,true).
iff(false,true,false).
iff(false,false,true).
iff(false,false,false).
iff(true,true,true,true).
iff(false,true,false,false).
iff(false,false,true,false).
iff(false,false,false,true).
iff(false,true,true,false).
iff(false,true,false,true).
iff(false,false,true,true).
iff(false,false,false,false).



/*


XSB Version 2.5 (Okocim) of March 11, 2002
[powerpc-apple-darwin6.4; mode: optimal; engine: slg-wam; gc: indirection; scheduling: local]

| ?- [parser_bta].
[Compiling ./parser_bta]
++Warning[XSB]: [Compiler] ./parser_bta: Redefining the standard predicate: true/0
[parser_bta compiled, cpu time used: 0.0700 seconds]
[parser_bta loaded]

yes
| ?- nont(true,X,Y).

X = true
Y = true;

X = false
Y = false;

no

-----------> after execution either both X and Y are ground or both X and Y are not ground

| ?- [tables].
[tables loaded]

yes
| ?- get_calls(t(X,Y,Z),C,R).

X = true
Y = true
Z = _h121
C = 3255528
R = ret(_h121);

X = true
Y = false
Z = _h121
C = 3255424
R = ret(_h121);

X = true
Y = _h107
Z = _h121
C = 3255320
R = ret(_h107,_h121);

no


As you can see: t always called with first argument ground


| ?- get_calls(nont(X,Y,Z),C,R).

X = true
Y = true
Z = _h121
C = 3255476
R = ret(_h121);

X = true
Y = false
Z = _h121
C = 3255372
R = ret(_h121);

X = true
Y = _h107
Z = _h121
C = 3255268
R = ret(_h107,_h121);

no

Ditto for nont

*/
