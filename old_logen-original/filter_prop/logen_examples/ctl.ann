/* file: ctl.ann */
:- multifile ann_clause/3, filter/2, residual/1.
:- dynamic ann_clause/3, filter/2, residual/1.
:- dynamic static_consult/1.

static_consult([]).

residual(sat(A,B)).
filter(sat(A,B),[type(list(dynamic)),static]).
ann_clause(1,sat(A,true),true).
ann_clause(2,sat(A,false),rescall(fail)).
ann_clause(3,sat(A,p(B)),unfold(prop(A,B))).
ann_clause(4,sat(A,and(B,C)),(unfold(sat(A,B)),unfold(sat(A,C)))).
ann_clause(5,sat(A,or(B,C)),unfold(sat(A,B))).
ann_clause(6,sat(A,or(B,C)),unfold(sat(A,C))).
ann_clause(7,sat(A,not(B)),resnot(hide_nf(memo(sat(A,B))))).
ann_clause(8,sat(A,en(B)),(unfold(trans(C,A,D)),unfold(sat(D,B)))).
ann_clause(9,sat(A,an(B)),resnot(hide_nf(unfold(sat(A,en(not(B))))))).
ann_clause(10,sat(A,eu(B,C)),memo(sat_eu(A,B,C))).
ann_clause(11,sat(A,au(B,C)),
	(unfold(sat(A,not(eu(not(C),and(not(B),not(C)))))),
 	 memo(sat_noteg(A,not(C))))).
ann_clause(12,sat(A,ef(B)),unfold(sat(A,eu(true,B)))).
ann_clause(13,sat(A,af(B)),memo(sat_noteg(A,not(B)))).
ann_clause(14,sat(A,eg(B)),resnot(memo(sat_noteg(A,B)))).
ann_clause(15,sat(A,ag(B)),unfold(sat(A,not(ef(not(B)))))).

residual(sat_eu(A,B,C)).
filter(sat_eu(A,B,C),[type(list(dynamic)),static,static]).
ann_clause(16,sat_eu(A,B,C),unfold(sat(A,C))).
ann_clause(17,sat_eu(A,B,C),(unfold(sat(A,B)),
	unfold(trans(D,A,E)),memo(sat_eu(E,B,C)))).

residual(sat_noteg(A,B)).
filter(sat_noteg(A,B),[type(list(dynamic)),static]).
ann_clause(18,sat_noteg(A,B),unfold(sat(A,not(B)))).
ann_clause(19,sat_noteg(A,B),
	resnot(hide_nf((unfold(trans(C,A,D)),resnot(memo(sat_noteg(D,B))))))).


residual(trans(A,B,C)).
filter(trans(A,B,C),[dynamic,type(list(dynamic)),dynamic]).
ann_clause(20,trans(enter_cs,[s(A),s(B),C,D,E],[A,B,s(C),D,E]),true).
ann_clause(21,trans(exit_cs,[A,B,s(C),D,E],[A,s(B),C,s(D),E]),true).
ann_clause(22,trans(restart,[A,B,C,s(D),E],[s(A),B,C,D,s(E)]),true).

residual(prop(A,B)).
filter(prop(A,B),[dynamic,static]).
ann_clause(23,prop([A,B,s(s(C)),D,E],unsafe),true).
ann_clause(24,prop([0,A,0,0,B],deadlock),true).
ann_clause(25,prop([A,0,0,0,B],deadlock),true).


/* a simple counter example */
ann_clause(30,prop([0],zero1),true).
ann_clause(31,trans(inc,[X],[Z]),rescall('#='(Z,'+'(X,1)))).
ann_clause(32,trans(dec,[X],[Z]),rescall('#='(Z,'-'(X,1)))).

/* a simple counter where inc is controlled by a semaphore */
ann_clause(40,prop([0,_],zero2),true).
ann_clause(41,trans(inc,[X,s(SEM)],[s(X),s(SEM)]),true).
ann_clause(42,trans(dec,[s(X),Y],[X,Y]),true).
ann_clause(43,trans(rem,[X,s(SEM)],[X,SEM]),true).

/* Emerson,Clarke Mutex example:
filter(trans(A,B,C),[dynamic,dynamic,dynamic]).
ann_clause(trans(action,A,B),memo(trans(A,B))).

residual(trans(A,B)).
filter(trans(A,B),[dynamic,dynamic]).
ann_clause(trans(0,1),true).
ann_clause(trans(0,2),true).
ann_clause(trans(1,3),true).
ann_clause(trans(1,4),true).
ann_clause(trans(2,5),true).
ann_clause(trans(2,6),true).
ann_clause(trans(3,0),true).
ann_clause(trans(3,7),true).
ann_clause(trans(4,7),true).
ann_clause(trans(5,8),true).
ann_clause(trans(6,0),true).
ann_clause(trans(6,8),true).
ann_clause(trans(7,2),true).
ann_clause(trans(8,1),true).

residual(prop(A,B)).
filter(prop(A,B),[dynamic,dynamic]).
ann_clause(prop(0,n1),true).
ann_clause(prop(0,n2),true).
ann_clause(prop(1,t1),true).
ann_clause(prop(1,n2),true).
ann_clause(prop(2,n1),true).
ann_clause(prop(2,t2),true).
ann_clause(prop(3,c1),true).
ann_clause(prop(3,n2),true).
ann_clause(prop(4,t1),true).
ann_clause(prop(4,t2),true).
ann_clause(prop(5,t1),true).
ann_clause(prop(5,t2),true).
ann_clause(prop(6,n1),true).
ann_clause(prop(6,c2),true).
ann_clause(prop(7,c1),true).
ann_clause(prop(7,t2),true).
ann_clause(prop(8,t1),true).
ann_clause(prop(8,c2),true).

*/