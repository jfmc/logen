eval(cst(X),_,X).eval(var(X),S,V) :- member((X,V),S).eval(plus(X,Y),S,V) :- eval(X,S,VX),eval(Y,S,VY), V is VX+VY.member(X,[X|_]).member(X,[_|T]) :- member(X,T)./* =>eval(plus(plus(cst(1),cst(2)),plus(cst(3),cst(4))),[],R).running mix (0 additional times)generalise(eval(plus(plus(cst(1),cst(2)),plus(cst(3),cst(4))),[],_11820),eval(plus(plus(cst(1),cst(2)),plus(cst(3),cst(4))),_12101,_12103))finished(eval(plus(plus(cst(1),cst(2)),plus(cst(3),cst(4))),_12101,_12103))mix:memo_call(eval(plus(plus(cst(1),cst(2)),plus(cst(3),cst(4))),[],_11820),eval__0([],_11820))specialisation time: 0 msfiltered atom: eval__0([],_11820)writing the specialised program to: eval/eval.pe.eval_[]_eval__0(B,C) :-   D is (1 + 2),  E is (3 + 4),  C is (D + E).    */